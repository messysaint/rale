package loader;

import loader.script.worker.*;
import loader.script.util.*;

import loader.util.*;
import loader.process.*;

import java.net.*;
import java.io.*;
import java.lang.Runtime;
import java.util.*;
import java.sql.*;
import HTTPClient.*;
//import encryptor.*;
import javax.net.*;
import javax.net.ssl.*;
import java.security.*;

public class loader {
    
    static ResourceBundle config;

    //remote scripting variables
    static scriptMap cmdMap = new scriptMap();
    static parameterMap paramMap = new parameterMap();
    
    static {
        
        try {
            config = ResourceBundle.getBundle( "conf.server", Locale.getDefault() );                        
            
            // load commands
            cmdMap.addCommandBundle( "remoteScript", config );    
            // load parameters
            paramMap.addParameterBundle( cmdMap.getCommands(), config );        
            
        } catch (MissingResourceException mre) {
            System.err.println( mre.toString() );
            System.exit(1);
        }
        
    } // static
        
    String keystore = "LicenseKey";  // path to server key file generated by keytool
    char[] keystorepass = "uxzp10st".toCharArray();
    char[] keypassword  = "uxzp10st".toCharArray();
    
    char nextLine = '|';
                
    //private String TomcatBase = "/manager";   // Tomcat 4.x 
    String TomcatBase = "/manager/html";   // Tomcat 5.x 
            
    String password  = config.getString( "password" );
    String tomcatAdmin = config.getString( "tomcatAdmin" );
    String tomcatRealm = config.getString( "tomcatRealm" );    
    String tomcatPassword = config.getString( "tomcatPassword" );                  
    String tomcatVersion = config.getString( "tomcatVersion" );
    
    String[] protectedJar = tokenize( config.getString( "protectedLibs" ) );
    String[] protectedClass = tokenize( config.getString( "protectedClasses" ) );
    String loaderHome = config.getString( "loaderHome" );
    String webappsDir = config.getString( "webappsDir" );
    String commonLib = config.getString( "commonLibsDir" );
    String commonClasses = config.getString( "commonClassesDir" );
    String logDir = config.getString( "logDir" );
    String resourceFactory = config.getString( "resourceFactory" );
    String scriptDir = config.getString( "scriptDir" );
    int port = new Integer( config.getString( "port" ) ).intValue();
    int tomcatPort = new Integer( config.getString( "tomcatPort" ) ).intValue();
    
    String fs = System.getProperty( "file.separator" );
    
    String domain = "127.0.0.1";        
    String installPath = webappsDir;    
    String command;
    String warFile;
    String commonLibFile;
    String commonClassFile;
    
            
            
    public ServerSocket getServer() throws Exception {
        
        KeyStore ks = KeyStore.getInstance("JKS");
        ks.load(new FileInputStream(keystore), keystorepass);
        KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
        kmf.init(ks, keypassword);
        SSLContext sslcontext = SSLContext.getInstance("SSLv3");
        sslcontext.init(kmf.getKeyManagers(), null, null);
        ServerSocketFactory ssf = sslcontext.getServerSocketFactory();
        SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(port);
        return serversocket;
        
    }
    
    
    // multi-threading -- create a new connection
    // for each request
    public void run() {
                
        //set Tomcat Base
        if( tomcatVersion.equalsIgnoreCase( "4" ) ) {
            TomcatBase = "/manager";
        } else if( tomcatVersion.equalsIgnoreCase( "5" ) ) {
            TomcatBase = "/manager/html";
        } else {
            TomcatBase = "/manager/html";
        }
        
        displayConfig();
        
        ServerSocket listen;
        try {
            listen = getServer();
            while(true) {
                Socket client = listen.accept();
                processRequest cc = new processRequest( this, client );
            }
        } catch(Exception e) {
            System.out.println( e.toString() );
        }
    }
    
        
    // String parser
    public String[] tokenize( String s ) {
        
        StringTokenizer tokenString = new StringTokenizer(s);
        
        String[] returnValue = new String[tokenString.countTokens()];
        
        int i = 0;
        
        while( tokenString.hasMoreTokens()) {
            
            returnValue[i++] = tokenString.nextToken();
            
        }
        
        return returnValue;
        
    }
    
   
    
    public void setCommand( String cmd ) {
        command = cmd;
    }
    
    public String getCommonClassesPath() {
        return commonClasses;
    }
    
    
    public String getCommand() {
        return command;
    }
    
    public String getWebApplicationDir() {
        return webappsDir;
    }
    
    public void setWarFile( String war ) {
        warFile = war;
    }
    
    public String getWarFile() {
        return warFile;
    }
    
    public String getCommonLibPath() {
        return commonLib;
    }
    
    public void setCommonLib( String jarFile ) {
        commonLibFile = jarFile;
    }
    
    public void setCommonClass( String classFile ) {
        commonClassFile = classFile;
    }
    
    
    public synchronized boolean backup() {
        
        boolean rvalue = false;
        
        File target = new File( webappsDir + fs + warFile );
        
        String timestamp = new Timestamp( Calendar.getInstance().getTimeInMillis() ).toString() ;
        
        timestamp = '.' + timestamp.replace( ' ', '_').replace( ':', '-' );
        
        File backupdir = new File( logDir + fs + warFile + timestamp );
        
        if( target.exists() ) {
            
            String[] envp = new String[1];
            envp[0] = "dummy=dummy";
            File workDir = new File( webappsDir );
            
            String execStr = "mv " + target.toString() + " " + backupdir.toString();
            
            try {
                Runtime rt = Runtime.getRuntime();
                Process proc = rt.exec( execStr, envp, workDir );
                
                // ------------
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR");
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT");
                errorGobbler.start();
                outputGobbler.start();
                // ------------
                
                int exit = proc.waitFor();
                System.out.println( warFile + " was moved to logs directory. [exit value = " + exit + "]" );
                rvalue = true;
                
            } catch (Throwable t) {
                rvalue = false;
                t.printStackTrace();
            }
            
            return rvalue;
            
        } else {
            System.out.println( target.toString() + " does not exist" );
            rvalue = true;
        }
        
        return rvalue;
    }
    
    public synchronized boolean removeArchive() {
        
        boolean rvalue = false;
        
        String[] envp = new String[1];
        envp[0] = "dummy=dummy";
        File workDir = new File( webappsDir );
        File file = new File( webappsDir + fs + warFile );
        
        String execStr = "rm " + webappsDir + fs + warFile;
        
        if( file.exists() ) {
            
            try {
                Runtime rt = Runtime.getRuntime();
                Process proc = rt.exec( execStr, envp, workDir );
                
                // ------------
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR");
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT");
                errorGobbler.start();
                outputGobbler.start();
                // ------------
                
                int exit = proc.waitFor();
                System.out.println( warFile + " was deleted. [exit value = " + exit + "]" );
                rvalue = true;
                
            } catch (Throwable t) {
                rvalue = false;
                t.printStackTrace();
            }
        } else {
            System.out.println( file.toString() + " does not exist" );
            rvalue = true;
        }
        
        return rvalue;
    }
    
    // creates new webapp directory
    public synchronized boolean createdir() {
        
        boolean rvalue = false;
        
        String execStr = "mkdir " + warFile;
        
        String[] envp = new String[1];
        envp[0] = "dummy=dummy";
        
        File workDir = new File( webappsDir );
        
        try {
            Runtime rt = Runtime.getRuntime();
            Process proc = rt.exec( execStr, envp, workDir );
            
            // ------------
            StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR");
            StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT");
            errorGobbler.start();
            outputGobbler.start();
            // ------------
            
            int exit = proc.waitFor();
            System.out.println( warFile + " directory was created. [exit value = " + exit + "]" );
            rvalue = true;
            
        } catch (Throwable t) {
            rvalue = false;
            t.printStackTrace();
        }
        
        return rvalue;
        
    }
    
    
    // copy war file to webapp directory
    public synchronized boolean copywar() {
        
        boolean rvalue = false;
        
        // cp file.war webapps/likha
        String execStr = "cp " + webappsDir + fs + warFile + ".war " + webappsDir + fs + warFile;
        String[] envp = new String[1];
        envp[0] = "dummy=dummy";
        
        File file = new File( webappsDir + fs + warFile + ".war" );
        File workDir = new File( webappsDir );
        
        if( file.exists() ) {
            
            try {
                
                Runtime rt = Runtime.getRuntime();
                Process proc = rt.exec( execStr, envp, workDir );
                
                // ------------
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR");
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT");
                errorGobbler.start();
                outputGobbler.start();
                // ------------
                
                int exit = proc.waitFor();
                System.out.println( warFile + " was copied. [exit value = " + exit + "]" );
                rvalue = true;
                
            } catch (Throwable t) {
                rvalue = false;
                t.printStackTrace();
            }
            
        } else {
            System.out.println( file.toString() + " does not exist" );
            rvalue = false;
        }
        
        return rvalue;
        
    }
    
    // Unwar the new copy of the web archive
    public synchronized boolean unwar() {
        
        boolean rvalue = false;
        
        String execStr = "jar xf " + warFile + ".war";
        String[] envp = new String[1];
        envp[0] = "dummy=dummy";
        
        File workDir = new File( webappsDir + fs + warFile );
        
        File file = new File( webappsDir + fs + warFile + fs + warFile + ".war" );
        
        if( file.exists() ) {
            
            try {
                Runtime rt = Runtime.getRuntime();
                Process proc = rt.exec( execStr, envp, workDir );
                
                // ------------
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR");
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT");
                errorGobbler.start();
                outputGobbler.start();
                // ------------
                
                int exit = proc.waitFor();
                System.out.println( warFile + " file was refreshed. exit value = " + exit + "]" );
                rvalue = true;
                
            } catch (Throwable t) {
                rvalue = false;
                t.printStackTrace();
            }
        } else {
            System.out.println( file.toString() + " does not exist" );
            rvalue = false;
        }
        
        return rvalue;
        
    }
    
    
    
    // copy dummy file to webapp directory
    public synchronized boolean copydummy() {
        
        String dummyHome = "/templates";
        boolean rvalue = false;
        
        // cp file.war webapps/likha
        String execStr = "cp " + loaderHome + dummyHome + fs + "dummy.war " + webappsDir + fs + warFile + ".war";
        String[] envp = new String[1];
        envp[0] = "dummy=dummy";
        
        File workDir = new File( webappsDir );
        
        try {
            
            Runtime rt = Runtime.getRuntime();
            Process proc = rt.exec( execStr, envp, workDir );
            
            // ------------
            StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR");
            StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT");
            errorGobbler.start();
            outputGobbler.start();
            // ------------
            
            int exit = proc.waitFor();
            System.out.println( execStr );
            System.out.println( warFile + " was copied. [exit value = " + exit + "]" );
            rvalue = true;
            
        } catch (Throwable t) {
            rvalue = false;
            t.printStackTrace();
        }
        
        return rvalue;
        
    }
    
    
    //
    public synchronized String installArchive( String archive) {
        
        String rvalue = "";
        
        try {
            
            HTTPConnection con = new HTTPConnection( domain, tomcatPort );
            con.addBasicAuthorization( tomcatRealm, tomcatAdmin, tomcatPassword );
            con.setAllowUserInteraction( false );
            
            String URI = TomcatBase + "/install?path=/" + warFile + "&war=file:" + installPath + '/' + archive;
            System.out.println( URI );
            HTTPResponse rsp = con.Get( URI );
                        
            rvalue = new String( rsp.getData() ); 
            
            con.stop();
            
        } catch (IOException ioe) {            
            System.out.println( ioe.toString() );
        } catch (ModuleException me) {            
            System.out.println( me.toString() );
        }
        
        return rvalue;
    }
    
    
    //
    public synchronized String tomcatRemoveArchive( String archive) {
        
        String rvalue = "";
        
        try {
            
            HTTPConnection con = new HTTPConnection( domain, tomcatPort );
            con.addBasicAuthorization( tomcatRealm, tomcatAdmin, tomcatPassword );
            con.setAllowUserInteraction( false );
            
            String URI = TomcatBase + "/undeploy?path=/" + archive;
            
            if( tomcatVersion.equalsIgnoreCase( "4" ) ) {
                URI = TomcatBase + "/remove?path=/" + archive;
            } else if ( tomcatVersion.equalsIgnoreCase( "5" ) ) {
                URI = TomcatBase + "/undeploy?path=/" + archive;
            }
            
            System.out.println( URI );
            
            HTTPResponse rsp = con.Get( URI );
            
            rvalue = new String( rsp.getData() );
            
            con.stop();
            
        } catch (IOException ioe) {            
            System.out.println( ioe.toString() );
        } catch (ModuleException me) {            
            System.out.println( me.toString() );
        }
        
        return rvalue;
    }
    
    
    public synchronized String tomcatManagerAction( String action ) {
        
        String rvalue = new String();
        HTTPResponse rsp;
        
        try {
            
            HTTPConnection con = new HTTPConnection( domain, tomcatPort );
            con.addBasicAuthorization( tomcatRealm, tomcatAdmin, tomcatPassword );
            con.setAllowUserInteraction( false );
            
            if( action.equalsIgnoreCase( "list" ) ) {
                rsp = con.Get( TomcatBase + "/" + action );
                System.out.println( TomcatBase + "/" + action );
            } else {
                rsp = con.Get( TomcatBase + "/" + action + "?path=/" + warFile );
                System.out.println( TomcatBase + "/" + action + "?path=/" + warFile );
            }
            
            
            if( rsp.getStatusCode() >= 300 ) {
                String response = rsp.getReasonLine();
                System.out.println( "Received Error: " +  response );
                rvalue = response;
            } else {
                if( action.equalsIgnoreCase( "list" ) ) {
                    String list = new String( rsp.getData() );
                    System.out.println( "OK - Listing current web applications");
                    rvalue = list.replace( '\n', nextLine );  // return HTTP response
                } else {
                    rvalue = action + " - Ok";
                }
                
            }
            
        } catch (IOException ioe) {
            System.out.println( ioe.toString() );
            rvalue = ioe.toString();
        } catch (ModuleException me) {
            System.out.println( "Error handling request: " + me.toString() );
            rvalue = me.toString();
        }
        
        return rvalue;
        
    }
    
    
    
    
    public String listCommonLib() {
        
        String rvalue = new String( "No files found" );
        File lib = new File( commonLib );
        String[] files = new String[1];
        
        if( lib.exists() ) {
            files = lib.list();
            if( files.length > 0 ) {
                rvalue = "";
                for( int i = 0 ; i < files.length ; i++ ) {
                    rvalue += files[i] + " | ";
                }
            }
        }
        
        return rvalue;
    }
    
    
    public String listCommonClasses() {
        
        String rvalue = new String( "No files found" );
        File lib = new File( commonClasses );
        String[] files = new String[1];
        
        if( lib.exists() ) {
            files = lib.list();
            if( files.length > 0 ) {
                rvalue = "";
                for( int i = 0 ; i < files.length ; i++ ) {
                    rvalue += files[i] + " | ";
                }
            }
        }
        
        return rvalue;
    }
    
    
    
    public synchronized String deleteCommonLib() {
        
        String rvalue = new String( "Delete - Ok " );
        
        if( canDeleteJar( commonLibFile ) ) {
            removeSelectedJar( commonLibFile );
        } else {
            rvalue = "Not allowed to delete Jar file";
        }
        
        return rvalue;
    }
    
    public synchronized String deleteCommonClass() {
        
        String rvalue = new String( "Delete - Ok " );
        
        if( canDeleteClass( commonClassFile ) ) {
            removeSelectedClass( commonClassFile );
        } else {
            rvalue = "Not allowed to delete class file";
        }
        
        return rvalue;
    }
    
    
    public boolean canDeleteJar( String jarFile ) {
        
        boolean rvalue = true;
        int len = protectedJar.length;
        
        for( int i = 0 ; i < len ; i++ ) {
            if( protectedJar[i].equalsIgnoreCase( jarFile ) ) {
                rvalue = false;
            }
        }
        
        return rvalue;
    }
    
    public boolean canDeleteClass( String classFile ) {
        
        boolean rvalue = true;
        int len = protectedClass.length;
        
        for( int i = 0 ; i < len ; i++ ) {
            if( protectedClass[i].equalsIgnoreCase( classFile ) ) {
                rvalue = false;
            }
        }
        
        return rvalue;
    }
    
    public synchronized boolean removeSelectedJar( String selectedFile ) {
        
        boolean rvalue = false;
        
        File target = new File( commonLib + fs + selectedFile );
        
        String timestamp = new Timestamp( Calendar.getInstance().getTimeInMillis() ).toString() ;
        
        timestamp = '.' + timestamp.replace( ' ', '_').replace( ':', '-' );
        
        File backupdir = new File( logDir + fs + selectedFile + timestamp );
        
        if( target.exists() ) {
            
            if( target.renameTo( backupdir ) ) {
                System.out.println( "Backed up : " + target.toString() );
                rvalue = true;
            } else {
                System.out.println( "Backup error : " + target.toString() );
                rvalue = false;
            }
            
        } else {
            System.out.println( target.toString() + " does not exist" );
            rvalue = true;
        }
        
        return rvalue;
    }
    
    
    public synchronized boolean removeSelectedClass( String selectedFile ) {
        
        boolean rvalue = false;
        
        File target = new File( commonClasses + fs + selectedFile );
        
        String timestamp = new Timestamp( Calendar.getInstance().getTimeInMillis() ).toString() ;
        
        timestamp = '.' + timestamp.replace( ' ', '_').replace( ':', '-' );
        
        File backupdir = new File( logDir + fs + selectedFile + timestamp );
        
        if( target.exists() ) {
            
            if( target.renameTo( backupdir ) ) {
                System.out.println( "Backed up : " + target.toString() );
                rvalue = true;
            } else {
                System.out.println( "Backup error : " + target.toString() );
                rvalue = false;
            }
            
        } else {
            System.out.println( target.toString() + " does not exist" );
            rvalue = true;
        }
        
        return rvalue;
    }
    
    
    public synchronized String getServerXml() {
        
        String rvalue = new String();
        String s = new String();
        DataInputStream in;
        
        try {
            in = new DataInputStream( new BufferedInputStream( new FileInputStream( resourceFactory ) ) );
            try {
                while( (s = in.readLine())!= null ) {
                    rvalue += s + '\n';
                }
                
                try {
                    in.close();
                } catch( IOException exc ){
                    rvalue += exc.toString();
                }
            } catch( IOException exc ){
                rvalue += exc.toString();
            }
        } catch( IOException exc ) {
            rvalue += exc.toString();
        }
        
        rvalue = rvalue.replace( '\n', nextLine );  // return HTTP response
        return rvalue;
    }
    
    
    public synchronized boolean backupServerXml() {
        
        boolean rvalue = false;
        
        String timestamp = new Timestamp( Calendar.getInstance().getTimeInMillis() ).toString() ;
        
        timestamp = '.' + timestamp.replace( ' ', '_').replace( ':', '-' );
        
        
        if( new File( resourceFactory ).exists() ) {
            
            // cp file.war webapps/likha
            String execStr = "cp " + resourceFactory + " " + resourceFactory + timestamp;
            String[] envp = new String[1];
            envp[0] = "dummy=dummy";
            
            File workDir = new File( webappsDir );
            
            try {
                
                Runtime rt = Runtime.getRuntime();
                Process proc = rt.exec( execStr, envp, workDir );
                
                // ------------
                StreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), "ERROR");
                StreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), "OUTPUT");
                errorGobbler.start();
                outputGobbler.start();
                // ------------
                
                int exit = proc.waitFor();
                System.out.println( execStr );
                System.out.println( warFile + " was copied. [exit value = " + exit + "]" );
                rvalue = true;
                
            } catch (Throwable t) {
                rvalue = false;
                t.printStackTrace();
            }
            
        } else {
            System.out.println( resourceFactory + " does not exist" );
            rvalue = true;
        }
        
        return rvalue;
    }
    
    
    public String getServerXmlPath() {
        return resourceFactory.substring( 0, resourceFactory.lastIndexOf( '/' ) );
    }
    
    
    public String getPasswordDigest() {
        return password;
    }

    
    public void displayConfig() {
        
        System.out.println( "\nRALE port: " + port );        
        
        System.out.println( "Tomcat Realm: " + tomcatRealm );        
        System.out.println( "Tomcat Version: " + tomcatVersion );
        
        System.out.println( "Loader Home: " + loaderHome );                    
        System.out.println( "Web Application Directory: " + webappsDir );
        System.out.println( "Tomcat Common Libraries Directory: " + commonLib );
        System.out.println( "Tomcat Common Classes Directory: " + commonClasses );
        System.out.println( "Loader Log Directory: " + logDir );
        
    }
    
} // end of class SSocket

